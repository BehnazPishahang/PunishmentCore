@using Anu.Commons.ServiceModel.ServiceAuthentication
@using Anu.PunishmentOrg.Client.Infrastructure.Contracts.Authorization


@inject IAnuAuthorizationService  _anuAuthorizationService;
@inject AppConfiguration _appConfiguration;

<EditForm Model="@_tokenModel" >
      <MudDialog>
        <TitleContent> 
            <div class="d-flex justify-center">
                                <MudIcon Icon="@Icons.Filled.Balance" Color="Color.Primary" Size="Size.Large" ViewBox="0 0 500 500" Style="width: 100px; height: 100px;" />
                            </div>
         </TitleContent>
    <DialogContent>
                    <MudGrid>
                        <MudItem xs="12">
                            
                        </MudItem>
                        <DataAnnotationsValidator />
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                                <MudText Typo="Typo.h4" Style="text-shadow: -2px 3px 3px grey;">ورود به سایت </MudText>
                            </div>
                        </MudItem>
       
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                                <MudText>آیا تا کنون در سایت ثبت نام نکرده اید؟ <MudLink Href="/register">ثبت نام </MudLink></MudText>
                            </div>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField T="string" Label="شماره ملی" Variant="Variant.Outlined" Margin="Margin.Dense"
                                          @bind-Value="_tokenModel.UserName" For="@(() => _tokenModel.UserName)" Validation="Validated.ToString()"/>
                        </MudItem>
                        <MudItem xs="8">
                            <MudTextField T="string" Label="رمز پویا" Variant="Variant.Outlined" Margin="Margin.Dense"
                                         @bind-Value="_secondRequest.Password" For="@(() => _secondRequest.Password)"></MudTextField>
                        </MudItem>

                        <MudItem xs="4">
                            <MudButton Variant="Variant.Filled"  OnClick="GetAccessCode" Size="Size.Medium" Style="width: 100%;">دریافت رمز</MudButton>
                        </MudItem>

                @*  <MudItem xs="12" Class="d-flex justify-center">
                            <MudButton  Variant="Variant.Filled" Disabled="@(!Validated)" Color="Color.Primary" Size="Size.Large" Style="width: 100%;"  >ورود </MudButton>
                        </MudItem>*@
                        <MudItem xs="12">
                            <div class="d-flex justify-center">
                                <MudText Color="Color.Error">@errorMessage </MudText>
                            </div>
                        </MudItem>
                    </MudGrid>
 </DialogContent>
   <DialogActions>
        <MudItem xs="12" Class="d-flex justify-center">
                           <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Size="Size.Large" Style="width: 100%;">ورود</MudButton>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-center">
                           <MudButton Variant="Variant.Filled" Color="Color.Warning" Href="/false" Size="Size.Large" Style="width: 100%;">برگشت</MudButton>
                        </MudItem>
      
       
    </DialogActions>
</MudDialog>
</EditForm>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    string errorMessage = "";
    private FirstStepUserLoginRequest _tokenModel = new();
    private SecondStepUserLoginRequest _secondRequest = new();
    private bool Validated = true;

    void GetAccessCode()
    {
        var ss=  _appConfiguration.BackendServerAddress;
        AuthResult  result= _anuAuthorizationService.LoginUser(_appConfiguration.BackendServerAddress , _appConfiguration.LoginAddress ,_tokenModel);
        if (result.Result.Code == 1000)
        {
            SharedInfo.NationalCode = _tokenModel.UserName;
            errorMessage = "";
        }
        else
        {
            errorMessage = result.Result.Message;
        }
    }
    void Submit()
    {
        var ss=  _appConfiguration.BackendServerAddress;
        _secondRequest.PhoneNumber = _tokenModel.UserName;
        AuthResult  result= _anuAuthorizationService.SecondStepLogin(_appConfiguration.BackendServerAddress , _appConfiguration.SecondStepLogin ,_secondRequest);
        if (result.Result.Code == 1000)
        {
            _navigationManager.NavigateTo("/true");
            errorMessage = "";
        }
        else
        {
            errorMessage = result.Result.Message;
            Validated = false;
        }
    }


   
}