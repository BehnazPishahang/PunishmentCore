@page "/Login"
@using Anu.Commons.ServiceModel.ServiceAuthentication
@using Anu.PunishmentOrg.Client.Infrastructure.Contracts.Authorization


@inject IAnuAuthorizationService  _anuAuthorizationService;
@inject AppConfiguration _appConfiguration;
@inject ISnackbar Snackbar


<section class="vh-100">
  <div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col col-xl-10">
        <div class="card" style="border-radius: 1rem;">
          <div class="row g-0">
            <div class="col-md-6 col-lg-5 d-none d-md-block" >
              
                <MudImage ObjectFit="@ImageFit" 
                            Height="400"
                            Width="400" 
                            src="/pic/LoginArm.png" 
                            
                            Elevation="25" 
                            Class="rounded-lg"
                             OnClick="@(() => SetImageFit(ObjectFit.Fill))"/>
            </div>
            <div class="col-md-6 col-lg-7 d-flex align-items-center">
              <div class="card-body p-4 p-lg-5 text-black">

                <MudForm Model="@_tokenModel">
                      <MudText align-center  Typo="Typo.h5" Style="text-shadow: -2px 3px 3px grey;text-align: center;">ورود به پیشخوان خدمات تعزیرات  </MudText>

                     <br/>
                  

                  <div class="form-outline mb-4">
                     <MudTextField T="string" Label="شماره ملی" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Immediate="true"
                            MaxLength="10"
                            Required="true" 
                            RequiredError="کد ملی باید 10 رقم باشد "
                           Placeholder="1467561088" 
                           OnKeyDown="onLoginTextKeyPress"
                           @bind-Value="_tokenModel.UserName"  />

                          

                  </div>

                  <div class="form-outline mb-4">
                      <MudItem Class="row">
                    <MudItem xs="8">
                            <MudTextField T="string" Label=" کد ورود" Variant="Variant.Outlined" Margin="Margin.Dense"  MaxLength=6
                                         @bind-Value="_secondRequest.Password"   ></MudTextField>
                        </MudItem>

                        <MudItem xs="4">
                            <MudButton Variant="Variant.Filled"  disabled="@(hasSmsSend)"  OnClick="@(async () => await GetAccessCode())" Size="Size.Medium" Style="width: 100%;"> 

                                    @if(hasSmsSend)
                                     {
                                             <b> @ProgressValue ثانیه </b>
                                             <MudProgressCircular Color="Color.Error" Size="Size.Small" Value="@ProgressValue"  />
                                    }
                                    else
                                    {
                                            <b>دریافت کد </b>
                                    }
                            </MudButton>
                        </MudItem>
                        </MudItem>
                  </div>

                  <MudItem class="row">
                       <MudItem xs="6" Class="d-flex justify-center">
                           <MudButton Color="Color.Error"  Variant="Variant.Outlined"
                                StartIcon="@Icons.Custom.Brands.GitHub" Href="/ChangeMobileNumber" >تغییر شماره</MudButton>
                        </MudItem>
                        <MudItem xs="6" Class="d-flex justify-center">
                           <MudButton Variant="Variant.Filled"  disabled="@(!hasSmsSend)" Color="Color.Primary" OnClick="Submit" Size="Size.Large" Style="width: 100%;">ورود</MudButton>
                        </MudItem>
                       
                  </MudItem>
                  <br />
                    <div class="d-flex justify-center">
                                <MudText>آیا تا کنون در سایت ثبت نام نکرده اید؟ <MudLink Href="/register">ثبت نام </MudLink></MudText>
                            </div>
                </MudForm>

              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
@code {
    ObjectFit ImageFit = ObjectFit.Cover;

    void SetImageFit(ObjectFit value)
    {
        ImageFit = value;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    string errorMessage = "";
    private FirstStepUserLoginRequest _tokenModel = new();
    private SecondStepUserLoginRequest _secondRequest = new();
    private bool Validated = true;

    bool _disposed;
    public void Dispose() => _disposed = true;

    private int ProgressValue { get; set; }
    private bool hasSmsSend = false;

    public async void SimulateProgress()
    {
        ProgressValue = 120;
        do
        {
            if (_disposed)
            {
                return;
            }

            ProgressValue -= 1;
            StateHasChanged();
            await Task.Delay(1000);

        } while (ProgressValue > 0);

        hasSmsSend = false;
        StateHasChanged();
    }


    private  async Task GetAccessCode()
    {


        var ss = _appConfiguration.BackendServerAddress;
        hasSmsSend = true;
        FirstStepAuthResult result =await _anuAuthorizationService.SendSmsAuth(_appConfiguration.BackendServerAddress, _appConfiguration.SendSmsAuth, _tokenModel);
        if (result.Result.Code == 100013)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add(result.Result.Message,  Severity.Success);
            hasSmsSend = true;
            SimulateProgress();
            SharedInfo.NationalCode = _tokenModel.UserName;
            errorMessage = result.Result.Message;

        }
        else
        {
            errorMessage = result.Result.Message;
            hasSmsSend = false;
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add(errorMessage,  Severity.Warning);
        }
    }

    private void onLoginTextKeyPress()
    { 
        if(hasSmsSend)
            hasSmsSend = false;
    }
    void Submit()
    {

        if (string.IsNullOrEmpty(_secondRequest.Password) || _secondRequest.Password.Length != 6)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add("کد ارسال شده را وارد نمایید ",  Severity.Warning);
            return;
        }

        var ss = _appConfiguration.BackendServerAddress;

        _secondRequest.UserName = _tokenModel.UserName;
        _secondRequest.LoginType = Commons.ServiceModel.ServiceAuthentication.Enumerations.LoginType.LoginWithSms;
        AuthResult result = _anuAuthorizationService.V2Login(_appConfiguration.BackendServerAddress, _appConfiguration.LoginAddress, _secondRequest).Result;
        if (result.Result.Code == 1000)
        {
            SharedInfo.NationalCode = _tokenModel.UserName;
            SharedInfo.AccessToken = result.AccessToken;
            _navigationManager.NavigateTo("/");
            errorMessage = "";

        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;
            Snackbar.Add(result.Result.Message,  Severity.Warning);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        hasSmsSend = false;
    }
}
