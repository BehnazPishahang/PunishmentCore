@page "/GranovmentPendingList"

@using Anu.PunishmentOrg.Client.Infrastructure.Granovment
@using Anu.PunishmentOrg.ServiceModel.Gravamen

@inject AppConfiguration _appConfiguration

<style>
    .header {
  padding: 15px;
  text-align: center;
  background: #005c99;
  color: white;
  font-size: 30px;
  font-family:'B Titr';
  margin-bottom:5px;
  border-radius:5px;
}
</style>

<div class="header">
  <h3>لیست شکایت های در دست بررسی</h3>
</div>


   <MudDataGrid T="PGravamenInfoContract" Items="@gravoments"  EditMode="DataGridEditMode.Form"
    Bordered="true" Dense="true" EditTrigger=" DataGridEditTrigger.Manual" QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudText Typo="Typo.h6"> لیست شکایت های در دست بررسی </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="جستجو" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <Column T="PGravamenInfoContract" Field="FollowUpNo" Title="شماره پیگیری"/>
        <Column T="PGravamenInfoContract" Field="PetitionSubject" Title="موضوع شکایت نامه" />
      
         <Column T="PGravamenInfoContract"  CellClass="d-flex justify-end" Style="width:50px">
            <CellTemplate>
              
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Filled.Visibility" Color="Color.Primary"  OnClick="() => GravamneSummary(context.Item)">مشاهده</MudButton>
            </CellTemplate>
        </Column>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PGravamenInfoContract" />
    </PagerContent>
</MudDataGrid>

@code {

    IEnumerable<PGravamenInfoContract> gravoments;
    IEnumerable<PGravamenInfoContract> gravomentsSelection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            GetPersonPGravamenInfoContract _pGravamenInfoContract = new();

            PGravamenService pService = new();
            GetPersonPGravamensInfoRequest request = new();
            gravoments = pService.GetGravamenListByNationalNo(_appConfiguration.BackendServerAddress, _appConfiguration.GetGravamenListByNationalNo, SharedInfo.NationalCode, SharedInfo.AccessToken);

            if (gravoments != null)
            {
                foreach (var item in gravoments)
                {
                    switch (item.TheObjectState.Code)
                    {
                        case "000499":
                        case "000501":
                        case "000503":
                        case "000498":
                        case "000500":
                        case "000502":
                        case "000505":
                        case "000506":
                            gravomentsSelection.Append(item);
                            break;
                    }
                }
            }

            gravoments = gravomentsSelection;
        }
        catch
        {

        }
    }


    private void GravamneSummary(PGravamenInfoContract contex)
    {
        _navigationManager.NavigateTo($"/GranovmentSummary/{contex.FollowUpNo}");
    }

           private string _searchString;
 
           private Func<PGravamenInfoContract, bool> _quickFilter => x =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;

            if (x.FollowUpNo.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;


            return false;
        };
}
