@page "/FrmNoticeMain2"
@using System.Net.Http.Json
@using Anu.PunishmentOrg.Client.Infrastructure.Notice
@using Anu.PunishmentOrg.ServiceModel.Notice

@inject HttpClient httpClient

<MudDataGrid T="PNoticeContract"  Bordered="true"  Hover="true" Dense="true" Striped="true" Items="@Elements" ColumnResizeMode="ResizeMode.Column" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6"> ابلاغ </MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="جستجو" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="PNoticeContract" />
       
        <Column T="PNoticeContract" Field="CreateDateTime" Title="زمان ثبت" />
        <Column T="PNoticeContract" Field="No" Title="شماره " />
        <Column T="PNoticeContract" Field="NoticeDate"   Title="تاريخ ابلاغ " ortBy="@_sortBy" />
        <Column T="PNoticeContract" Field="NoticePersonName"   Title="نام  ابلاغ شونده " />
        <Column T="PNoticeContract" Field="NoticePersonFamily" Title="نام خانوادگي ابلاغ شوند" />
        
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PNoticeContract" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">مرتب سازی نام ستون بر اساس طول    </MudSwitch>
</div>

@*<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>*@

@code {
    private IEnumerable<PNoticeContract> Elements = new List<PNoticeContract>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<PNoticeContract, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.CreateDateTime.Length;
        else
            return x.CreateDateTime;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<PNoticeContract, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.CreateDateTime.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.No.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.NoticeDate} {x.NoticePersonFamily} {x.NoticePersonName}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
       
         string ncode = SharedInfo.NationalCode;
            Elements = NoticeService.getPNoticeList(ncode);
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<PNoticeContract> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<PNoticeContract> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}