@using System.Security.Claims

<UserCard />
@*<MudNavMenu Color="Color.Primary">
    <MudNavLink Href="/dashboard" Match="NavLinkMatch.All" Icon="@Icons.Filled.Dashboard"  > کارتابل </MudNavLink>

    <MudIcon Icon="@selectedIcon" Color="@MainLayout._iconColor"    />

    <MudButton Variant="Variant.Filled" OnClick="ChangeIcon" DisableElevation="true" Size="Size.Small">Change Icon</MudButton>

      <MudNavLink Href="/FrmNoticeMain" Icon="@Icons.Filled.ManageSearch"   IconColor = "@_iconColor" >
                جستجوی ابلاغ
            </MudNavLink>
            <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.AddIcCall"  IconColor = "@_iconColor" >
                 ثبت شکایت 
            </MudNavLink>
              <MudNavLink Href="/isConstracting" Icon="@Icons.Material.Filled.Payments"  IconColor="@_iconColor"  >
                 پرداخت وجه 
            </MudNavLink>
            <MudNavLink Href="/isConstracting" Icon="@Icons.Material.Filled.DocumentScanner"  IconColor = "@_iconColor"  >
                لایحه
            </MudNavLink>
                <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.DriveFileRenameOutline" >
                درخواست تجدید نظر خواهی 
            </MudNavLink>
             <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.DonutLarge" >
               درخواست اعمال ماده ۲۳ 
            </MudNavLink>
              <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.EscalatorWarning" >
                ثبت وکالت نامه 
            </MudNavLink>
                <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.DoorSliding" >
                درخواست رسیدگی مجدد  
            </MudNavLink>
             <MudNavLink Href="/isConstracting" Icon="@Icons.Custom.Uncategorized.FolderOpen" >
             پیگیری پرونده 
            </MudNavLink>
             <MudNavLink Href="/isConstracting" Icon="@Icons.Filled.EmojiPeople" >
             ثبت اعتراض  
            </MudNavLink>
        
    
    
</MudNavMenu>*@

@code {

    static MudBlazor.Color  _iconColor = Color.Success;
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;
    System.Collections.Generic.Dictionary<string, object> _custom;
    private static string selectedIcon = Icons.Custom.Brands.MudBlazor;
     public static void ChangeIcon()
    {
        if (MainLayout.DarkMode)// selectedIcon == Icons.Custom.Brands.MudBlazor)
        {
            selectedIcon = Icons.Custom.Brands.GitHub;
            _iconColor = Color.Success;
        }
        else
        {
             selectedIcon = Icons.Custom.Brands.MudBlazor;
            _iconColor = Color.Error;
        }
    }
    protected override void OnInitialized()
    {
   
    }    
    protected override async Task OnParametersSetAsync()
    {
       //// _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
       // _canViewHangfire = ( _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfawaitire.View)).Succeeded;
       // _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
       // _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
       // _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
       // _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
       // _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
       // _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
       // _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
       // _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
       // _canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded


        _canViewHangfire = true;
        _canViewDashboards = true;
        _canViewDocuments = true;
        _canViewDocumentTypes =true;
        _canViewAuditTrails = true;
        _canViewRoles = true; 
        _canViewUsers = true; 
        _canViewChat = true; 
        _canViewProducts = true;
        _canViewBrands = true;

    }
  }